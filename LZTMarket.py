# shitcode by Y4sperMaglot

# –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–∞–∫

from .. import loader, utils

from bs4 import BeautifulSoup as BS
import requests
import base64
from asyncio import sleep


@loader.tds
class LZTMarketMod(loader.Module):
    """–í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –º–∞—Ä–∫–µ—Ç–∞ lolz"""

    strings = {'name': 'LZTMarket'}

    async def client_ready(self, client, db):
        self.client = client

    async def lolzcmd(self, message):
        """.lolz —Ä–µ–ø–ª–∞–π –∏–ª–∏ —Å—Å—ã–ª–∫–∞"""

        UserAgent = 'Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 6.0; Win64; x64; Trident/5.0; .NET CLR 3.8.50799; Media Center PC 6.0; .NET4.0E)'


        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ #
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        if not reply and not args:
            await message.edit('<b>–†–µ–ø–ª–∞–π –∏–ª–∏ —Å—Å—ã–ª–∫–∞</b>')
            return

        url = args or reply.raw_text
        if 'lolz.guru/market/' not in url and len(url) < 27:
            await message.edit('<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –≤ –º–∞—Ä–∫–µ—Ç–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞</b>')
            return

        # –û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ #
        await message.edit('<b>–û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞...</b>')

        try:
            f = requests.get('https://lolz.guru/process-qv9ypsgmv9.js', headers={
                "User-Agent": UserAgent}).text

            bytes = str(f.split(',')[6]).replace(';(function(_0x2217ae', '').replace('+', '').replace("'", "").replace(']', '')
            strbyte = str(base64.b64decode(bytes).decode('utf-8'))
            page = requests.get(url, headers={
                "User-Agent": UserAgent,
                "Cookie": f'df_id={strbyte}'})
            await message.edit('<b>–£—Å–ø–µ—à–Ω–æ</b>')
            await sleep(0.5)

        except:
            await message.edit('<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...</b>')
            return


        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã #
        await message.edit('<b>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...</b>')

        soup = BS(page.text, 'html.parser')

        link = f'<a href="{url}">–û—Ç–∫—Ä—ã—Ç—å</a>'  # –°—Å—ã–ª–∫–∞

        try:
            service_account = soup.find_all('span', itemprop='title')[1].string.strip()   # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–∞
        except:
            await message.edit('<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –≤ –º–∞—Ä–∫–µ—Ç–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞</b>')

        try:
            header = soup.find_all('h1', class_='h1Style marketItemView--titleStyle fl_l')[0].string.strip()   # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        except:
            header = "–ü—É—Å—Ç–æ–π"

        for count in range(0, 1000):
            try:
                find = soup.find_all('span', class_=f'style{str(count)}')
                
                if find:
                    seller = find[0].string.strip()      # –°–µ–ª–ª–µ—Ä
                    break
            except:
                pass

        price = soup.find_all('span', class_='value')[0].string.strip()  # –¶–µ–Ω–∞

        try:
            accorigin = soup.find_all('abbr', class_='DateTime')[0].string.strip()
        except:
            accorigin = soup.find_all('span', class_='DateTime')[0].string.strip()    # –î–∞—Ç–∞

        await message.delete()

        await message.client.send_message(message.to_id, f'üé™ –ö–æ–Ω—Ç–æ—Ä–∞: {service_account}\nüè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {header}\nüë®‚Äçüíª –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller}\nüíµ –¶–µ–Ω–∞: {price}—Ä—É–±\n‚åõ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {accorigin}\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–π–¥: {link}')




















